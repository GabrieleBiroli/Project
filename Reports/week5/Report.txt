Adithya Ravichandran:
- Finished implementing provide functionality along with The Nguyen
- Fixed implementation of withdraw functionality
- Create PoolListWidgetItem, a class to display all metrics about a pool, and connected it to the trade, provide and withdraw functionalities
- Chose graphing framework to work with PoolListWidgetItem and wrote template for FrontEnd team to work with

Shubh: 
- Finished Implementation and Commenting of Simple Stochastic Simulator
- Created a perfect Arbitrage function
- Planned out ways to extend simulator through rolling averages and more random movement
- Delegated tasks to team member and explained ideas.

Mia Chambat: 

This week I worked on implementing two helper functions for the second full simulation of the 
liquidity pool. The first one returns the mean of the last ten values of a list and the second 
one, given a mean, variance and sample size, samples a normal distribution.

Minh Pham:
- Testing the playground, the market simulation on (simulation-utils branch) and update the code to work with new Playground class. 
- Implement the simulation playground with timestep for pre-programmed scenario (in test version, will keep developing in the following weeks).  

Alessandro:
During the course of this week, I have continued my efforts on designing and implementing the visual interface for the liquidity protocol simulator. My primary focus has been on embedding the graphs of the tokens within the widgets of the interface, utilizing both the Qt Charts and Qt Widgets modules. I will continue to work on this task in the coming days, with the aim of completing the visual interface.

Matheo LM:
- New class Withdraw : for the user to withdraw (take back) what he has put previously in pools. When the user provides he creates a pool or adds to one, and then he gets a token representing the percentage of the pool he owns. When withdrawing, the user sends back this pool token in exchange for what he owns in the pool, which is what he has provided plus possible pool fees collected from othersâ€™ transactions.
- Create the button itself with ui (Dialog window) : display on the dialog window what output would the user get by withdrawing
- New function in playground to get all pools following a certain protocol
- New function in Operations so that we can access the pool in which the operation was done
- Debugging with Tu


Amine:
- Finalized my math research document which I had been working on for the past weeks.
- Worked on creating metric to evaluate the divergence loss of the protocol, which should be implemented in the arbitrager class
